#use json
Перем Настройки Экспорт;
Перем КодВозврата;
Перем _ Экспорт;
Перем Дескриптор;


Процедура ОбработатьИБ(ИБ, РежимРаботы) Экспорт
	Перем НомерПопыткиОбработкиИБ;
	Перем МаксимальноеКоличествоПопытокОбработкиИБ;

	НомерПопыткиОбработкиИБ = 0;
	МаксимальноеКоличествоПопытокОбработкиИБ = 3;
	ПрочитатьНастройки();
	// ДописатьВЛогФайл(">>>> "+ИБ, 0);
	_.Вставить("ИБимя", ИБ);
	Если РежимРаботы = "OUT" Тогда
		Для НомерПопыткиОбработкиИБ = 1 По МаксимальноеКоличествоПопытокОбработкиИБ Цикл
			Сообщить(""+ТекущаяДата()+Символы.Таб+ИБ+" выгрузка");
			ДТ = _["dt_dir"]+"\"+ИБ+".dt";
			ОпределитьНаличиеКаталога(_["dt_dir"]);
			Дескриптор = ДескрипторУправленияСеансамиБазы();
			ОтключитьПользователей();
			Попытка
				ВыгрузитьДТ(_["ИБимя"], ДТ);
			Исключение
				// ДописатьВЛогФайл("["+НомерПопыткиОбработкиИБ+"] Не удалось выгрузить ИБ "+ОписаниеОшибки(), 0);
			КонецПопытки;
			Дескриптор = ДескрипторУправленияСеансамиБазы();
			ПолучитьЗначениеФлагаЗапретаРегламентныхЗаданий(_["ИБимя"]);
			// ДописатьВЛогФайл("Получено значение флага запрета регл.заданий  "+_["ИБимя"]+" = "+УстановленЗапретРеглЗаданий, 2);
			УстановитьБлокировкуИнформационнойБазы(Ложь);
			ЗакрытьДескриптор();
			Если КодВозврата = 0 Тогда
				Сообщить(""+ТекущаяДата()+Символы.Таб+_["ИБимя"]+" готово");
				ИмяСохраняемогоДТ = Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd")+"_"+_["ИБимя"]+".dt";
				КаталогВнешнегоХранилища = _["bak_dir"]+"\"+_["ИБимя"];
				ОпределитьНаличиеКаталога(КаталогВнешнегоХранилища);
				// ДописатьВЛогФайл("Копируется файл "+ИмяСохраняемогоДТ, 2);
				КопироватьФайл(ДТ, 	_["dt_dir"]+"\"+ИмяСохраняемогоДТ);
				КопироватьФайл(ДТ, 	КаталогВнешнегоХранилища+"\"+ИмяСохраняемогоДТ);
			Иначе
				// ТекстОшибки = Новый ЧтениеТекста(_["log_dir"]+"\out_"+_["ИБимя"]+".log", КодировкаТекста.ANSI);
				// ДописатьВЛогФайл("ERR:("+НомерПопыткиОбработкиИБ+") "+ТекстОшибки.Прочитать(), 1);
			КонецЕсли;
		КонецЦикла;
		// Если Не (Настройки.ВыгрузитьСписокБаз) Тогда
			// ДописатьВЛогФайл("Завершение с кодом "+КодВозврата, 1);
			Exit(КодВозврата);
		// КонецЕсли;
	// ИначеЕсли РежимРаботы = "IN" Тогда
	// 	Для НомерПопыткиОбработкиИБ = 1 По МаксимальноеКоличествоПопытокОбработкиИБ Цикл
	// 		Сообщить(""+ТекущаяДата()+Символы.Таб+ИБ+" загрузка");
	// 		ОпределитьНаличиеКаталога(Настройки.КаталогФайловВыгрузокИБ);
	// 		Дескриптор = ДескрипторУправленияСеансамиБазы();	
	// 		ОтключитьПользователей();
	// 		ДТ = ОпределитьИмяДТФайлаДляЗагрузки(Настройки.ИБимя);
	// 		Если ДТ = Неопределено Тогда
	// 			ВызватьИсключение "Не удалось определить файл для загрузки для ИБ = "+Настройки.ИБимя;
	// 		КонецЕсли;
	// 		ДТ = Настройки.КаталогФайловВыгрузокИБ+"\"+ДТ+".dt";
	// 		Если Не ПроверитьФайл(ДТ) Тогда
	// 			ВызватьИсключение "Файл "+ДТ+" отсутствует";
	// 		КонецЕсли;
	// 		Попытка
	// 			ЗагрузитьДТ(Настройки.ИБимя, ДТ);
	// 		Исключение
	// 			// ДописатьВЛогФайл("["+НомерПопыткиОбработкиИБ+"] Не удалось загрузить ИБ "+ОписаниеОшибки(), 0);
	// 		КонецПопытки;
	// 		Дескриптор = ДескрипторУправленияСеансамиБазы();
	// 		ПолучитьЗначениеФлагаЗапретаРегламентныхЗаданий(Настройки.ИБимя);
	// 		// ДописатьВЛогФайл("Получено значение флага запрета регл.заданий  "+Настройки.ИБимя+" = "+УстановленЗапретРеглЗаданий, 2);
	// 		УстановитьБлокировкуИнформационнойБазы(Ложь);
	// 		ЗакрытьДескриптор();
	// 		Если КодВозврата > 0 Тогда
	// 			ТекстОшибки = Новый ЧтениеТекста(Настройки.КаталогФайловПротоколов+"\in_"+Настройки.ИБимя+".log", КодировкаТекста.ANSI);
	// 			// ДописатьВЛогФайл("ERR:("+НомерПопыткиОбработкиИБ+")"+ТекстОшибки.Прочитать(), 1);
	// 		Иначе
	// 			ИзменитьЗаголовокИБ(Настройки.ИБимя);
	// 			Возврат;
	// 		КонецЕсли;

	// 		Сообщить(""+ТекущаяДата()+Символы.Таб+ИБ+" готово ");
	// 		Если Не (Настройки.ЗагрузитьСписокБаз) Тогда
	// 			Exit(КодВозврата);
	// 		КонецЕсли;
	// 	КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьНастройки()
	ПодключитьСценарий("main.lib", "liba");
	ж = Новый liba;
	Отказ = Ложь;
	ж.Инициализировать(ЭтотОбъект, Отказ);
	// Для каждого ппп Из _ Цикл
	// 	Сообщить(ппп.Ключ);
	// КонецЦикла;
	// Возврат Новый Структура;
КонецФункции // ПрочитатьНастройки()

Процедура ОпределитьНаличиеКаталога(Знач Каталог)

	Файл = Новый Файл(Каталог);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(Каталог);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Каталог " + Каталог + " не является каталогом";
	КонецЕсли;

КонецПроцедуры

Функция   ДескрипторУправленияСеансамиБазы() Экспорт
	
	Перем ComConnector;
	Перем ServerAgent;
	Перем Clusters;
	
	Дескриптор = Новый Структура;
	Дескриптор.Вставить("ServerAgent", Неопределено);
	Дескриптор.Вставить("Cluster", Неопределено);
	Дескриптор.Вставить("ConnectToWorkProcess", Неопределено);
	Дескриптор.Вставить("InfoBase", Неопределено);
	
	АдресАгента = _["cl_addr"] + ":" + _["agn_port"];
	ИмяСервера = _["cl_addr"] + ":" + _["mng_port"];
	ComConnector = Новый ComObject(_["v8com"]);

	Попытка
	
		// ДописатьВЛогФайл("Подключение к агенту сервера "+АдресАгента, 2);
		ServerAgent = ComConnector.ConnectAgent(АдресАгента);
		Дескриптор.ServerAgent = ServerAgent;
		
		ДописатьВЛогФайл("Получение массива кластеров сервера у агента сервера", 2);
		Clusters = ServerAgent.GetClusters();
		
		Cluster = НайтиКластерСерверов(Clusters, ИмяСервера);
		// ДописатьВЛогФайл("Аутентикация к найденному кластеру: " + Cluster.HostName + ":" + Cluster.MainPort, 2);
		// ServerAgent.Authenticate(Cluster, Настройки.АдминистраторКластера, Настройки.ПарольАдминистратораКластера);
		ServerAgent.Authenticate(Cluster, "", "");
			
		Дескриптор.Cluster = Cluster;
		Дескриптор.ConnectToWorkProcess = ПолучитьСоединениеСПроцессом(ComConnector, ServerAgent, Cluster);
		Если Дескриптор.ConnectToWorkProcess <> Неопределено Тогда
			InfoBase = НайтиИнформационнуюБазуВРабочемПроцессе(Дескриптор.ConnectToWorkProcess);
			Если Infobase = Неопределено Тогда
				ВызватьИсключение "Не нашли нужную ИБ";
			КонецЕсли;
			
			Дескриптор.InfoBase = InfoBase;
			
		Иначе
			ВызватьИсключение "Нет запущенных рабочих процессов";
		КонецЕсли;
		
	Исключение

		ЗакрытьДескриптор();
		ОсвободитьОбъектКластера(Clusters);
		ОсвободитьОбъектКластера(ComConnector);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат Дескриптор;
	
КонецФункции

Процедура ОсвободитьОбъектКластера(Соединение)
	
	Если Соединение <> Неопределено Тогда
		ОсвободитьОбъект(Соединение);
		Соединение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьДескриптор() Экспорт

	ОсвободитьОбъектКластера(Дескриптор.ConnectToWorkProcess);
	ОсвободитьОбъектКластера(Дескриптор.Cluster);
	ОсвободитьОбъектКластера(Дескриптор.ServerAgent);
	ОсвободитьОбъектКластера(Дескриптор.InfoBase);

КонецПроцедуры

Функция   НайтиКластерСерверов(Знач Clusters, Знач ИмяСервера)
	
	НашлиКластер = Ложь;
	Для i = 0 По Clusters.Количество()-1 Цикл
		Cluster = Clusters[i];
		Если ВРег(Cluster.HostName) + ":" + Cluster.MainPort = ВРег(ИмяСервера) Тогда
			НашлиКластер = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НашлиКластер Тогда
		ОсвободитьОбъектКластера(Cluster);
		ВызватьИсключение "Ошибка - не нашли кластер <"+ИмяСервера+">";
	КонецЕсли;
	
	Возврат Cluster;
	
КонецФункции

Функция   ПолучитьСоединениеСПроцессом(Знач ComConnector, Знач ServerAgent, Знач Cluster)

	Перем СоединениеСПроцессом;

	Попытка
		
		ДописатьВЛогФайл("Получение списка работающих рабочих процессов и обход в цикле", 2);
			
		WorkingProcesses = ServerAgent.GetWorkingProcesses(Cluster);
			
		Для j = 0 To WorkingProcesses.Количество()-1 Цикл

			Если WorkingProcesses[j].Running = 1 Тогда
				
				СтрокаСоединения = "tcp://" + WorkingProcesses[j].HostName + ":" + WorkingProcesses[j].MainPort;
				ДописатьВЛогФайл("Создание соединения с рабочим процессом " + СтрокаСоединения, 2);
				ConnectToWorkProcess = ComConnector.ConnectWorkingProcess(СтрокаСоединения);
				
				ДописатьВЛогФайл("Авторизация в кластере: <clusterAdmin>", 2);
				ConnectToWorkProcess.AuthenticateAdmin("", "");
				ДописатьВЛогФайл("Авторизация в ИБ: <ИБАдмин>", 2);
				ConnectToWorkProcess.AddAuthentication("admin", "kzueirf");
				
				СоединениеСПроцессом = ConnectToWorkProcess;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ОсвободитьОбъектКластера(ConnectToWorkProcess);
		ОсвободитьОбъектКластера(WorkingProcesses);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ОсвободитьОбъектКластера(WorkingProcesses);
	
	Возврат СоединениеСПроцессом;

КонецФункции

Функция   НайтиДескрипторИнформационнойБазы(Знач ServerAgent, Знач Cluster)
	
	ДописатьВЛогФайл("Поиск нужной ИБ для сессии", 2);
	Возврат НайтиИнформационнуюБазуВКоллекции(ServerAgent.GetInfoBases(Cluster));
	
КонецФункции

Функция   НайтиИнформационнуюБазуВРабочемПроцессе(Знач ConnectToWorkProcess)
	
	ДописатьВЛогФайл("Получение списка ИБ рабочего процесса", 2);
	Возврат НайтиИнформационнуюБазуВКоллекции(ConnectToWorkProcess.GetInfoBases());
	
КонецФункции

Функция   НайтиИнформационнуюБазуВКоллекции(Знач InfoBases)
	
	Перем InfoBase;
	
	Попытка
		ИскомаяИБ = _["ИБимя"];
		БазаНайдена = Ложь;
		InfoBase = ОбойтиКоллекциюИНайтиИБ(InfoBases, ИскомаяИБ);
		
		БазаНайдена = InfoBase <> Неопределено;
		
	Исключение
		ОсвободитьОбъектКластера(InfoBase);
		ОсвободитьОбъектКластера(InfoBases);
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не БазаНайдена Тогда
		InfoBase = Неопределено;
	КонецЕсли;
	
	ОсвободитьОбъектКластера(InfoBases);
	
	Возврат InfoBase;
	
КонецФункции

Функция   ОбойтиКоллекциюИНайтиИБ(Знач InfoBases,Знач ИскомаяИБ)
	
	Перем InfoBase;
	ДописатьВЛогФайл("Поиск ИБ " + ИскомаяИБ, 2);
    Для Каждого InfoBase Из InfoBases Цикл
    //    ДописатьВЛогФайл(" Обрабатывается ИБ: " + InfoBase.Name, 3);
        Если НРег(InfoBase.Name) = НРег(ИскомаяИБ) Then
            БазаНайдена = Истина;
            ДописатьВЛогФайл("Нашли нужную ИБ "+ИскомаяИБ, 2);
            Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не БазаНайдена Тогда
		ОсвободитьОбъектКластера(InfoBase);
	КонецЕсли;
	
	Возврат InfoBase;
	
КонецФункции

Функция   ОтключитьПользователей()
	Попытка
		УстановитьБлокировкуИнформационнойБазы();
		// Если Не Настройки.ЖесткоеЗавершениеСессий Тогда
		// 	Попытка
		// 		ИнтервалОтключения = Число(Настройки.ТаймаутОтключения);
		// 	Исключение
		// 		ДописатьВЛогФайл("Не удалось получить значение таймаута блокировки", 0);
		// 		ВызватьИсключение "Не удалось получить значение таймаута блокировки";
		// 	КонецПопытки;
			
		// 	МаксимальноеЧислоПопыток = 1;
		// 	ЧислоПопыток = 0;
		// 	Пока ЧислоПопыток < МаксимальноеЧислоПопыток Цикл
				
		// 		Если ЕстьРаботающиеСеансы(Истина) Тогда
		// 			ЧислоПопыток = ЧислоПопыток + 1;
		// 			ДописатьВЛогФайл("Есть работающие сеансы. Ждем " + ИнтервалОтключения + " секунд. Попытка №" + Строка(ЧислоПопыток), 2);
		// 			Приостановить(ИнтервалОтключения*1000);
		// 		Иначе
		// 			Прервать;
		// 		КонецЕсли;
				
		// 	КонецЦикла;
		// КонецЕсли;
		Если ЕстьРаботающиеСеансы(Истина) Тогда
			ПрекратитьСуществующиеСеансы();
		КонецЕсли;
		
		Если ЕстьРаботающиеСеансы(Истина) Тогда
			ДописатьВЛогФайл("Критичный сбой: Сеансы все равно не отключены!", 0);
			ВызватьИсключение "Критичный сбой: Сеансы все равно не отключены!";
		КонецЕсли;
		
		СоединенияОтключены = Истина;
	Исключение
		ЗакрытьДескриптор();
		Инфо = ИнформацияОбОшибке();
		ДописатьВЛогФайл(ПолучитьПолноеОписаниеОшибки(Инфо) ,0);
		СоединенияОтключены = Ложь;
	КонецПопытки;
	

	Если СоединенияОтключены Тогда
		ДописатьВЛогФайл("Соединения с базой " + Настройки.ИБимя + " успешно отключены", 2);
	КонецЕсли;
	
	Возврат СоединенияОтключены;
	
КонецФункции

Процедура ПрекратитьСуществующиеСеансы() Экспорт
	
	ДописатьВЛогФайл("Отключение сеансов информационной базы", 1);
	InfobaseDescriptor = НайтиДескрипторИнформационнойБазы(Дескриптор.ServerAgent, Дескриптор.Cluster);
	
	Sessions = Дескриптор.ServerAgent.GetInfoBaseSessions(Дескриптор.Cluster, InfobaseDescriptor);
	ДописатьВЛогФайл("Обработка списка сеансов. Длина списка "+Sessions.Количество(), 2);
	
    Для Сч = 0 По Sessions.Количество()-1 Цикл
        Session  = Sessions[Сч];
        UserName = Session.UserName;
        AppID    = ВРег(Session.AppID);
//		ConnApp  = Session.Connection.Application;
		
        ДописатьВЛогФайл("Попытка отключения: "+ " Session from "+Session.StartedAt+" User=["+UserName+"] ConnApp=["+""+"] AppID=["+AppID+"]", 3);
        Дескриптор.ServerAgent.TerminateSession(Дескриптор.Cluster, Session);
		ОсвободитьОбъектКластера(Session);
	КонецЦикла;
	
	ОсвободитьОбъектКластера(InfobaseDescriptor);
	ДописатьВЛогФайл("Сеансы завершены", 2);
	
КонецПроцедуры

Функция   ЕстьРаботающиеСеансы(Знач ТихаяПроверка = Ложь, Знач ИгнорироватьКонсольКластера = Истина) Экспорт
	
	ДописатьВЛогФайл("Проверка наличия открытых сеансов ", 2);
	Попытка
		InfobaseDescriptor = НайтиДескрипторИнформационнойБазы(Дескриптор.ServerAgent, Дескриптор.Cluster);
		Сеансы = Дескриптор.ServerAgent.GetInfoBaseSessions(Дескриптор.Cluster, InfobaseDescriptor);
		ЕстьСеансы = Ложь;
		Для Каждого Сеанс Из Сеансы Цикл
			AppID = Строка(Сеанс.AppID);
			ОсвободитьОбъектКластера(Сеанс);
			Если ВРег(AppID) <> "COMCONSOLE" Тогда
				ЕстьСеансы = Истина;
				Прервать;
			ИначеЕсли Не ИгнорироватьКонсольКластера Тогда
				ЕстьСеансы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;

	ДописатьВЛогФайл("При проверке обнаружено "+Сеансы.Количество()+" сеансов в ИБ "+InfobaseDescriptor.Name, 2);
	ОсвободитьОбъектКластера(InfobaseDescriptor);
	Возврат ЕстьСеансы;
	
КонецФункции

Процедура УстановитьБлокировкуИнформационнойБазы(ЗаблокироватьИБ = Истина) Экспорт
	
	InfoBase = Дескриптор.InfoBase;
	
	Если ЗаблокироватьИБ Тогда
		ДописатьВЛогФайл("Установка запрета на подключения к ИБ: " + InfoBase.Name, 2);
		УстановленЗапретРеглЗаданий = InfoBase.ScheduledJobsDenied;
		InfoBase.DeniedFrom  	= ТекущаяДата();
		InfoBase.DeniedTo    	= ТекущаяДата() + 2200;
		InfoBase.ConnectDenied 	= Истина;
		InfoBase.ScheduledJobsDenied = Истина;
		InfoBase.DeniedMessage 	= Символы.ПС
			+ Символы.ПС
			+ ?(Настройки.РежимРаботы = "IN", "Выполняется загрузка информационной базы из файла. ", "Выполняется выгрузка информационной базы. ")
			+ Символы.ПС
			+ "База будет недоступна приблизительно до "+Формат(ТекущаяДата()+2200,"ДФ=HH:mm")
			+ Символы.ПС
			+ Символы.ПС;
		InfoBase.PermissionCode = "0008";
		
		Попытка
			Дескриптор.ConnectToWorkProcess.UpdateInfoBase(InfoBase);
		Исключение
			
			Ошибка = ИнформацияОбОшибке();
			ДописатьВЛогФайл("Не удалось заблокировать подключения: <" + ПолучитьПолноеОписаниеОшибки(Ошибка) + "> Попытка восстановления...", 0);
			
			ВызватьИсключение;
			
		КонецПопытки;
	Иначе
		ДописатьВЛогФайл("Снятие запрета на подключения к ИБ: " + InfoBase.Name, 2);
		ДописатьВЛогФайл("Восстановление значения флага запрета регл. заданий: " + УстановленЗапретРеглЗаданий, 2);
		InfoBase.ConnectDenied = Ложь;
		InfoBase.ScheduledJobsDenied = ?(УстановленЗапретРеглЗаданий = Неопределено, Ложь,УстановленЗапретРеглЗаданий);
		InfoBase.DeniedMessage = "";
		InfoBase.PermissionCode = "";
		
		Попытка
			Дескриптор.ConnectToWorkProcess.UpdateInfoBase(InfoBase);
		Исключение
			Ошибка = ИнформацияОбОшибке();
			ДописатьВЛогФайл("Не удалось снять блокировку с ИБ ["+InfoBase.Name+"]: " + ПолучитьПолноеОписаниеОшибки(Ошибка), 0);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьДТ(ИБ, ДТ) Экспорт

	ДописатьВЛогФайл("Выгрузка файла "+ ДТ +" из ИБ " + ИБ, 1);
	ИсполняемыйФайл1С = Настройки.ИсполняемыйФайл1С;
	КоманднаяСтрокаРабочейБазы =Настройки.АдресСервераЦентральногоСервераКластера + "\" +ИБ;
	ПараметрыСвязиСБазой = Новый Массив;
	ПараметрыСвязиСБазой.Добавить(ИсполняемыйФайл1С);
	ПараметрыСвязиСБазой.Добавить("DESIGNER");
	ПараметрыСвязиСБазой.Добавить("/S """ + КоманднаяСтрокаРабочейБазы + """");
	Если Не ПустаяСтрока(Настройки.АдинистраторИнформационнойБазы) Тогда
		ПараметрыСвязиСБазой.Добавить("/N""" + Настройки.АдинистраторИнформационнойБазы + """");
	КонецЕсли;
	Если Не ПустаяСтрока(Настройки.ПарольАдинистратораИБ) Тогда
		ПараметрыСвязиСБазой.Добавить("/P""" + Настройки.ПарольАдинистратораИБ + """");
	КонецЕсли;
	ПараметрыСвязиСБазой.Добавить("/WA+");
	ПараметрыСвязиСБазой.Добавить("/DisableStartupMessages");
	ПараметрыСвязиСБазой.Добавить("/UC """ + "0008" + """");

	ПараметрыСвязиСБазой.Добавить("/DumpIB """+ДТ+"""");

	ПараметрыСвязиСБазой.Добавить("/Out """+Настройки.КаталогФайловПротоколов+"\out_"+ИБ+".log"+"""");

	КодВозврата = ЗапуститьИПодождать(ПараметрыСвязиСБазой);
	ДописатьВЛогФайл("Код возврата: "+КодВозврата, 1);
КонецПроцедуры

Функция   ПреобразоватьСтрокуВМассив(Знач ИсхСтрока, Разделитель = ",") Экспорт
	Результат = Новый Массив;
	Позиция = Найти(ИсхСтрока, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(ИсхСтрока, Позиция - 1);
		Если Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		ИсхСтрока = Сред(ИсхСтрока, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(ИсхСтрока, Разделитель);
	КонецЦикла;

	Если Не ПустаяСтрока(ИсхСтрока) Тогда
		Результат.Добавить(ИсхСтрока);
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция   ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",") Экспорт
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент ИЗ Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЗначениеФлагаЗапретаРегламентныхЗаданий(ИБ)

УстановленЗапретРеглЗаданий = Истина;
Возврат Истина;


	ИмяИниФайла = ".\cmd\bgStates.ini";
	ИниФайл = Новый ЧтениеТекста(ИмяИниФайла);
	СтрокаФайла = ИниФайл.ПрочитатьСтроку();
	Пока СтрокаФайла <> Неопределено Цикл
		Если Лев(СокрЛ(СтрокаФайла), 1) = "#" 
		 Или ПустаяСтрока(СтрокаФайла)
		Тогда
		Иначе
			Если Лев(СтрокаФайла, 1)="[" 
			 И Нрег(СтрокаФайла) = "["+Нрег(ИБ)+"]" 
			Тогда
				Пока СтрокаФайла <> Неопределено Цикл
					Если Лев(Врег(СтрокаФайла), 23) = "ISBACKGROUNDJOBDISABLED"
					Тогда
						УстановленЗапретРеглЗаданий=(Прав(СтрокаФайла,1)=0);
					КонецЕсли;
					СтрокаФайла = ИниФайл.ПрочитатьСтроку();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		СтрокаФайла = ИниФайл.ПрочитатьСтроку();
	КонецЦикла;
	УстановленЗапретРеглЗаданий = Истина; // если не нашли, значит запретить регл. задания
КонецФункции

Процедура ДописатьВЛогФайл(СтрокаВЛогФайл, Уровень = 0) Экспорт
	Если ПустаяСтрока(СтрокаВЛогФайл) Тогда
		Возврат;
	КонецЕсли;
	Рапорт 	= Строка(ТекущаяДата()) +" ["+Уровень+"]"+ Символы.Таб + СтрокаВЛогФайл;

	// Если глСкрипт.дбг >= Уровень Тогда
		Сообщить(Рапорт);
	// КонецЕсли;

		Протокол = Новый ЗаписьТекста(_["log_dir"]+"\"+_["log_today"]+"@"+_["ИБимя"], "utf-8",, Истина);
		Протокол.ЗаписатьСтроку(Рапорт);
		Протокол.Закрыть();

КонецПроцедуры

Функция   ПолучитьПолноеОписаниеОшибки(Ош)
	ТекстОшибки="";
	Пока Ош <> Неопределено Цикл
		Если Ош.Причина <> Неопределено Тогда
			ТекстОшибки = ТекстОшибки +" // "+ Ош.Причина.Описание;
		КонецЕсли;
		Ош = Ош.Причина;
	КонецЦикла;
	Возврат ТекстОшибки;
КонецФункции

Функция   ЗапуститьИПодождать(Знач Параметры) Экспорт

	СтрокаЗапуска = "";
	СтрокаДляЛога = "";
	Для Каждого Параметр Из Параметры Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;
	КодВозврата = 0;
	Сообщить("Строка запуска: "+СтрЗаменить(СтрокаЗапуска, Настройки.ПарольАдинистратораИБ, "ХХХХХХХ"));
	ДописатьВЛогФайл("Запуск приложения "+Параметры[0], 1);
	
	ЗапуститьПриложение(СтрокаЗапуска, ".", Истина, КодВозврата);

	Возврат КодВозврата;

КонецФункции


